#include "./classes.h"
#include "./wf.h"

cmplx* __restrict * __restrict wf::inhomogeneous_action(rl En, temporalbasis* tbas){
  //return -Amat.pmat.wf+Asqmat.olap.wf -- ie, the inhomogenous source term
  //for the least action equation
  

  int ot=tbas->order;
  //calculate P.psi for A.p terms
  cmplx* __restrict pwf=gbas->nablapsi(psi);
  //calculate Olap.psi for A^2 term
  cmplx* __restrict olapwf=gbas->Olappsi(psi);
  //the time evolution of the bound state is given by Exp(-I E0 t)
  cmplx* __restrict Eiwtvec=tbas->funcvector(ExpIwt,En);

  //call zgemv to find Amat.ExpIwtvector
  cmplx* __restrict AdotEiwt=initializearray(tbas->order);
  cmplx* __restrict AsqdotEiwt=initializearray(tbas->order);
  cmplx alpha=1.;
  cmplx beta=0.;
  cblas_zgemv(CblasColMajor,CblasNoTrans,ot,ot,
	      &alpha,tbas->Amat,ot,Eiwtvec,1,&beta,AdotEiwt,1);

  cblas_zgemv(CblasColMajor,CblasNoTrans,ot,ot,
	      &alpha,tbas->Asqmat,ot,Eiwtvec,1,&beta,AsqdotEiwt,1);

  //return A.p.psi.e^(-I w0 t)-1/2 Asq.Olap.psi..e^(-I w0 t)
  cmplx* __restrict * __restrict retactionarray=new cmplx* __restrict [ot];
  for(int n=0;n<ot;n++){
    cmplx* __restrict tmparray1=arraymultiply(pwf,nbf,AdotEiwt[n]);
    cmplx* __restrict tmparray2=arraymultiply(olapwf,nbf,AsqdotEiwt[n]);
    for(int i=0;i<nbf;i++){
      tmparray1[i]-=0.5*tmparray2[i];//add the two arrays
    }
    retactionarray[n]=tmparray1;
    delete [] tmparray2;
  }
  return retactionarray;
}
