#include "./classes.h"
#include "./wf.h"


//This file contains routines designed to iteratively solve the least action
//equation (i O Q - H U) (dpsi)=R by inserting Uinv.U between the lagrangian
//and the wavefunction, so that the new equation becomes 
//(i O (Q Uinv) - H (U Uinv)) (U dpsi)=R

//The new equation has the property that U Uinv is diagonal in the time index,
//while Q Uinv is lower triangular.  Because of this, the correction needed to
//zero residuals for time indices greater than or equal to 1 may be found by
//backsubstitution, so that the overall iterative procedure requires only n
//linear solves, as opposed to n^2 for previous way.  In addition, careful
//choice of the initial guess for dpsi can make it so that the residual of the
//initial guess does not include any terms of the form H*psi, so that the
//overall iterative procedure will not involve repeated multiplications by H.
//This will help numerical stability for high energy eigenvalues.

void wf::initialguess(int nmax, cmplx* __restrict psi0, 
		      cmplx* __restrict * __restrict psixt,
		      cmplx* __restrict * __restrict resid,
		      temporalbasis* tbas){
  //choose psixt s.t. psixt[0]=psi0, Sum_m Unm.psixt[m]=0 for n>0.  This will
  //help with numerical stability, since it will mean that H.U.psixt=0 for
  //n>0, so that there's no repeated multiplication by Hamiltonian matrix to
  //worry about.

  //cmplx* vec=ICvec_(nmax);
  cmplx* vec=initializearray(nmax);
  vec[0]=1.;
  vec[1]=1.;//choose initial guess to be constant function
  for(int n=0;n<nmax;n++){
    zeroarray(psixt[n],nbf);
    zeroarray(resid[n],nbf);
  }

  for(int n=0;n<nmax;n++){
    cmplx* __restrict tmppsi=new cmplx[nbf];
    for(int i=0;i<nbf;i++){
      tmppsi[i]=psi0[i]*vec[n];
    }
    applydeltapsi(n,nmax,tmppsi,psixt,resid,tbas);
  }

}

cmplx* __restrict * __restrict  
wf::Uinvpsi(int nmax,cmplx* __restrict * __restrict dphi){
  //Given dphi=U.dpsix, solve for dpsixt
  cmplx* __restrict * __restrict dpsixt=new cmplx* __restrict[nmax];
  for(int n=0;n<nmax;n++){
    dpsixt[n]=initializearray(nbf);
  }
  cmplx* __restrict rhsmat=new cmplx[nmax*nbf];
  for(int n=0;n<nmax;n++){
    for(int i=0;i<nbf;i++){
      //rhsmat[arrayindx(i,n,nbf,nmax)]=dphi[n][i];
      rhsmat[arrayindx(n,i,nmax,nbf)]=dphi[n][i];
    }
  }


  //for every spatial index, solve U_nm.dpsixt[m][i]=dphi[n][i]

  //take advantage of tridiagonal structure to solve using gaussian elimination
  cmplx* __restrict Umat=triD_Umat(nmax);
  cmplx* __restrict Diag=new cmplx[nmax];
  cmplx* __restrict DL=new cmplx[nmax-1];
  cmplx* __restrict DU=new cmplx[nmax-1];
  for(int n=0;n<nmax;n++){
    Diag[n]=Umat[arrayindx(n,n,nmax,nmax)];
  }
  for(int n=1;n<nmax;n++){
    DU[n]=Umat[arrayindx(n,n-1,nmax,nmax)];
    DL[n]=Umat[arrayindx(n-1,n,nmax,nmax)];
  }
  int nrhs=nbf;
  int info=0;
  zgtsv(&nmax,&nrhs,DL,Diag,DU,rhsmat,&nmax,&info);
  if(info!=0){
    cout << "problem with zgtsv!\n";
  }
  cout << "back from zgtsv\n";
  
  



//  //LU factorization method
//  //LU factorization of Umat will be used by all solvers
//  cmplx* __restrict UmatLU=triD_Umat(nmax);
//  int info=0;
//  int* ipiv=new int[nmax];
//  zgetrf(&nmax,&nmax,UmatLU,&nmax,ipiv,&info);
//  if(info!=0){
//    cout << "problem with zgetrf in Uinvpsi!\n";
//  }
//    //solve for dpsixt using backsubstitution
//  int nrhs=nbf;
//  char trans='N';
//  zgetrs(&trans,&nmax,&nrhs,UmatLU,&nmax,ipiv,rhsmat,&nmax,&info);
//  if(info!=0){
//    cout << "problem with zgetrs in Uinvpsi!\n";
//  }
  
  for(int n=0;n<nmax;n++){
    for(int i=0;i<nbf;i++){
      //dpsixt[n][i]=rhsmat[arrayindx(i,n,nbf,nmax)];
      dpsixt[n][i]=rhsmat[arrayindx(n,i,nmax,nbf)];
    }
  }

  cout << "deleting\n";
  delete [] rhsmat;
  cout << "rhsmat\n";
  //delete [] UmatLU;
  //delete [] ipiv;
  delete [] Diag;
  cout << "Diag\n";
  delete [] DL;
  cout << "DL\n";
  delete [] DU;
  delete [] Umat;
  

  return dpsixt;
}

cmplx* wf::residualcorrection_Uinv(int ncorr,int nresid, cmplx* __restrict resid, 
			      temporalbasis* tbas){
  //solve for change to wf at order ncorr necessary to cancel a residual at
  //level nresid 
  //i,e, set up and solve linear system for deltapsin s.t.  
  //((II*Olap_{i,j} Q_{nresid,ncorr}-H_{i,j}
  //U_{nresid,ncorr}+A_{nresid,ncorr}.P_{i,ncorr}- 1/2
  //Asq_{nresid,ncorr}Olap_{i,j}) Uinv_jk) (U_kl C_{l,ncorr})=-resid_{i,n}
  
  //cout << "inside residualcorrection_Uinv\n";

  cmplx II=cmplx(0.,1.);
  int neq=nbf;

  //cout << "inside residualcorrection\n";

  //set up rhsmat to be -resid_{i,n}
  cmplx* __restrict rhsvec=new cmplx[neq];
  for(int i=0;i<neq;i++){
    rhsvec[i]=-resid[i];
  }
  //cout << "rhsvec\n";
  //printmat(rhsvec,neq,1);
  //cout << "residxt[n]\n";
  //printmat(residxt[n],neq,1);


  int kl=gbas->xorder;
  int ku=gbas->xorder;
  int width=2*kl+ku+1;

  //find Uinv for tridiagonal basis
  int ot=tbas->order;
  //cout << "calling triD_Uinv\n";
  cmplx* __restrict Uinv=triD_Uinv(ot);
  cmplx alpha=1.;
  cmplx beta=0.;
  //cout << "found Uinv\n";

  //find Qmat.Uinv
  cmplx* __restrict QUinv=initializearray(ot*ot);
  cblas_zgemm(CblasColMajor,CblasNoTrans,CblasNoTrans,ot,ot,ot,&alpha,
	      tbas->qmat,ot,Uinv,ot,&beta,QUinv,ot);
  //cout << "found QUinv\n";

  //find Umat.Uinv(should be diagonal w/factor dt on diagonals)
  cmplx* __restrict UUinv=initializearray(ot*ot);
  cblas_zgemm(CblasColMajor,CblasNoTrans,CblasNoTrans,ot,ot,ot,&alpha,
	      tbas->umat,ot,Uinv,ot,&beta,UUinv,ot);
  //cout << "found UUinv\n";
  //find Amat.Uinv
  
  cmplx* __restrict AUinv=initializearray(ot*ot);
  cblas_zgemm(CblasColMajor,CblasNoTrans,CblasNoTrans,ot,ot,ot,&alpha,
	      tbas->Amat,ot,Uinv,ot,&beta,AUinv,ot);
  //cout << "found AUinv\n";
  //find Asqmat.Uinv
  cmplx* __restrict AsqUinv=initializearray(ot*ot);
  cblas_zgemm(CblasColMajor,CblasNoTrans,CblasNoTrans,ot,ot,ot,&alpha,
	      tbas->Asqmat,ot,Uinv,ot,&beta,AsqUinv,ot);
  //cout << "found AsqUinv\n";
//  cblas_zgemm(CblasColMajor,CblasNoTrans,CblasNoTrans,ot,ot,ot,&alpha,
//	      tbas->Asqmat,ot,tbas->umat,ot,&beta,AsqUmat,ot);

  cmplx Qval=QUinv[arrayindx(nresid,ncorr,ot,ot)];
  cmplx Uval=UUinv[arrayindx(nresid,ncorr,ot,ot)];
  cmplx Aval=AUinv[arrayindx(nresid,ncorr,ot,ot)];
  cmplx Asqval=AsqUinv[arrayindx(nresid,ncorr,ot,ot)];
    //cmplx ATval=tbas->Amat[arrayindx(ncorr,nresid,ot,ot)];//value for A transpose
  
  //cmplx AUval=AUmat[arrayindx(nresid,ncorr,ot,ot)];
  //cmplx AsqUval=AsqUmat[arrayindx(nresid,ncorr,ot,ot)];

  //if(ncorr!=nresid){
  //  cout << "ncorr\t"<<ncorr<<"\n";
  //  cout << "nresid\t"<<nresid<<"\n";
  //  cout << "Qval\t"<<Qval<<"\n";
  //  cout << "Uval\t"<<Uval<<"\n";
  //  cout << "Aval\t"<<Aval<<"\n";
  //  cout << "Asqval\t"<<Asqval<<"\n";
  //}

  //copy element hmat, olap into lhsmat
  cmplx* __restrict lhsmat=initializearray(nbf*width);
  for(int eltnum=0;eltnum<gbas->nelts;eltnum++){
    derivedbasis* tmpbasis=gbas->elementbases[eltnum];
    int tmporder=tmpbasis->order;
    cmplx* __restrict tmph=tmpbasis->Hmat;
    cmplx* __restrict tmpnablasq=tmpbasis->nablasqmat;
    cmplx* __restrict tmpV=tmpbasis->Vmat;
    cmplx* __restrict tmpo=tmpbasis->omat;
    cmplx* __restrict tmpnabla=tmpbasis->nablamat;
    
    //cout << "tmpnabla\n";
    //printmat(tmpnabla,tmporder,tmporder);
    //cout << "tmpnablasq\n";
    //printmat(tmpnablasq,tmporder,tmporder);

    //set up p.olap, olap.p for use in velocity gauge hamiltonian
    cmplx* __restrict tmpop=initializearray(tmporder*tmporder);
    cmplx* __restrict tmppo=initializearray(tmporder*tmporder);
    cmplx* __restrict tmposq=initializearray(tmporder*tmporder);

    cmplx alpha=cmplx(0.,1.);
    cmplx beta=0.;
    cblas_zgemm(CblasColMajor,CblasNoTrans,CblasNoTrans,tmporder,tmporder,
		tmporder,&alpha,tmpo,tmporder,tmpnabla,tmporder,&beta,
		tmpop,tmporder);
    cblas_zgemm(CblasColMajor,CblasNoTrans,CblasNoTrans,tmporder,tmporder,
		tmporder,&alpha,tmpnabla,tmporder,tmpo,tmporder,&beta,
		tmppo,tmporder);
    cblas_zgemm(CblasColMajor,CblasNoTrans,CblasNoTrans,tmporder,tmporder,
		tmporder,&alpha,tmpo,tmporder,tmpo,tmporder,&beta,
		tmposq,tmporder);

    
    //cout << "tmph "<<eltnum<<"\n";
    //printmat(tmph,tmporder,tmporder);
    //cout << "tmpo "<<eltnum<<"\n";
    //printmat(tmpo,tmporder,tmporder);
    for(int i=0;i<tmporder;i++){
      for(int j=0;j<tmporder;j++){
        int indx1=gbas->eltfirstindices[eltnum]+i;
        int indx2=gbas->eltfirstindices[eltnum]+j;
	lhsmat[bandarrayindx(indx1,indx2,ku,kl,nbf)]+=
          II*Qval*tmpo[arrayindx(i,j,tmporder,tmporder)]-
          Uval*(-.5*tmpnablasq[arrayindx(i,j,tmporder,tmporder)]+
		tmpV[arrayindx(i,j,tmporder,tmporder)])-
	  Aval*(II*tmpnabla[arrayindx(i,j,tmporder,tmporder)])+
	  Asqval*tmpo[arrayindx(i,j,tmporder,tmporder)];
      }
    }
    delete [] tmppo;
    delete [] tmpop;
    delete [] tmposq;
  }

  //solve for deltapsin using zgbsv
  int info=0;
  int* ipiv=new int[neq];
  int nrhs=1;
  int ldab=2*kl+ku+1;

  zgbsv(&neq,&kl,&ku,&nrhs,lhsmat,&ldab,ipiv,rhsvec,&neq,&info);
  if(info!=0){
    cout << "problem with zgbsv in residualcorrection! "<<info<<"\n";
  }
  //delete [] AUmat;
  //delete [] AsqUmat;
  delete [] Uinv;
  delete [] QUinv;
  delete [] UUinv;
  delete [] AUinv;
  delete [] AsqUinv;
  delete [] lhsmat;
  delete [] ipiv;

  //test solution
  //cout << "residxt[n]\n";
  //printmat(residxt[n],neq,1);
  //cmplx* Hdeltapsi=gbas->Hpsi(rhsvec);
  //cmplx* Olapdeltapsi=gbas->Olappsi(rhsvec);
  //cmplx* deltaresid=initializearray(neq);
  //for(int i=0;i<neq;i++){
  //  deltaresid[i]=II*Olapdeltapsi[i]*Qval-Hdeltapsi[i]*Uval;
  //}
  //cout << "delta resid\n";
  //printmat(deltaresid,neq,1);
  //end test solution

  return rhsvec;
}

void wf::applydeltapsi_Uinv(int nmax,cmplx* __restrict * __restrict deltapsi,
			 cmplx* __restrict * __restrict guessxt,
			 cmplx* __restrict * __restrict residxt, 
		       temporalbasis* tbas ){
  //call deltapsi for all temporal orders
  for(int n=0;n<nmax;n++){
    applydeltapsi_Uinv(n,nmax,deltapsi[n],guessxt,residxt,tbas);
  }

}


void wf::applydeltapsi_Uinv(int ncorr,int nmax, cmplx* __restrict deltapsi,
			 cmplx* __restrict * __restrict guessxt,
			 cmplx* __restrict * __restrict residxt, 
			 temporalbasis* tbas ){
  cmplx II=cmplx(0.,1.);
  int ot=tbas->order;
  //apply deltapsi vector to entry n of guessxt, adjust residuals by
  //L.Uinv.deltapsi

  //cout << "inside applydeltapsi\n";
  //cout <<"umat\n";
  //printmat(tbas->umat,ot,ot);
  //cout <<"qmat\n";
  //printmat(tbas->qmat,ot,ot);

  //apply deltapsi vector to entry n of guessxt
  //for(int i=0;i<nbf;i++){
  //  guessxt[ncorr][i]+=deltapsi[i];
  //}
  int inc=1;
  cmplx one=1.;
  cblas_zaxpy(nbf,&one,deltapsi,inc,guessxt[ncorr],inc);

  //find H0.deltapsi, nabla.deltapsi, Olap.deltapsi
  cmplx* __restrict H0deltapsi=gbas->Hpsi(deltapsi);
  cmplx* __restrict nabladeltapsi=gbas->nablapsi(deltapsi);
  cmplx* __restrict transposenabladeltapsi=gbas->transposenablapsi(deltapsi);
  cmplx* __restrict Olapdeltapsi=gbas->Olappsi(deltapsi);
  cmplx* __restrict nablaolapdeltapsi=gbas->nablapsi(Olapdeltapsi);
  cmplx* __restrict olapnabladeltapsi=gbas->Olappsi(nabladeltapsi);
  cmplx* __restrict Olapsqdeltapsi=gbas->Olappsi(Olapdeltapsi);

  //Uinv is inverse of tridiagonal overlap matrix (less factor of dt)
  cmplx* __restrict Uinv=triD_Uinv(ot);


  //find Qmat.Uinv
  cmplx alpha=1.;
  cmplx beta=0.;
  cmplx* __restrict QUinv=initializearray(ot*ot);
  cblas_zgemm(CblasColMajor,CblasNoTrans,CblasNoTrans,ot,ot,ot,&alpha,
	      tbas->qmat,ot,Uinv,ot,&beta,QUinv,ot);

  //find Umat.Uinv(should be diagonal w/factor dt on diagonals)
  cmplx* __restrict UUinv=initializearray(ot*ot);
  cblas_zgemm(CblasColMajor,CblasNoTrans,CblasNoTrans,ot,ot,ot,&alpha,
	      tbas->umat,ot,Uinv,ot,&beta,UUinv,ot);

  //find Amat.Uinv
  cmplx* __restrict AUinv=initializearray(ot*ot);

  cblas_zgemm(CblasColMajor,CblasNoTrans,CblasNoTrans,ot,ot,ot,&alpha,
	      tbas->Amat,ot,Uinv,ot,&beta,AUinv,ot);
  //find Asqmat.Uinv
  cmplx* __restrict AsqUinv=initializearray(ot*ot);

  cblas_zgemm(CblasColMajor,CblasNoTrans,CblasNoTrans,ot,ot,ot,&alpha,
	      tbas->Asqmat,ot,Uinv,ot,&beta,AsqUinv,ot);


  //correct residuals according to L.deltapsi
  //for tridiagonal temporal basis, umat will have bandwith of at most 2
  //q will have nonzero elements only for n<ncorr
  //Amat and Asqmat may have nonzero elements of any order
  //umat has bandwidth 2
  for(int n=0;n<ot;n++){//)for(int n=max(0,ncorr-2);n<min(nmax,ncorr+2);n++){
    cmplx uval=UUinv[arrayindx(n,ncorr,ot,ot)];
    //cout << "applydeltapsi uval "<<ncorr<<" "<<n<<" "<<uval<<"\n";
    cmplx coeff=-uval;
    cblas_zaxpy(nbf,&coeff,H0deltapsi,inc,residxt[n],inc);
  }
  //qmat elts are nonzero only for n<=ncorr
  for(int n=0;n<ot;n++){//for(int n=0;n<=max(ncorr,1);n++){
    cmplx qval=QUinv[arrayindx(n,ncorr,ot,ot)];
    //cout << "applydeltapsi qval "<<ncorr<<" "<<n<<" "<<qval<<"\n";
    cmplx coeff=II*qval;
    cblas_zaxpy(nbf,&coeff,Olapdeltapsi,inc,residxt[n],inc);
  }
  //for(int n=0;n<nmax;n++){
  //  cmplx AUval=AUmat[arrayindx(n,ncorr,ot,ot)];
  //  cmplx AsqUval=AsqUmat[arrayindx(n,ncorr,ot,ot)];
  //  //cmplx coeff=II*AUval;
  //  cmplx Aval=tbas->Amat[arrayindx(n,ncorr,ot,ot)];
  //  cmplx ATval=tbas->Amat[arrayindx(ncorr,n,ot,ot)];//value of A transpose
  //  cmplx coeff=-II*ATval/2.;
  //  cblas_zaxpy(nbf,&coeff,nabladeltapsi,inc,residxt[n],inc);
  //  coeff=II*Aval/2.;
  //  cblas_zaxpy(nbf,&coeff,transposenabladeltapsi,inc,residxt[n],inc);
  //  cmplx Asqval=tbas->Asqmat[arrayindx(n,ncorr,ot,ot)];
  //  //coeff=-AsqUval;
  //  coeff=Asqval;
  //  cblas_zaxpy(nbf,&coeff,Olapdeltapsi,inc,residxt[n],inc);
  //}
  for(int n=0;n<nmax;n++){
    cmplx Aval=AUinv[arrayindx(n,ncorr,ot,ot)];
    cmplx coeff=-II*Aval;
    cblas_zaxpy(nbf,&coeff,nabladeltapsi,inc,residxt[n],inc);
    cmplx Asqval=AsqUinv[arrayindx(n,ncorr,ot,ot)];
    //coeff=-AsqUval;
    coeff=Asqval;
    cblas_zaxpy(nbf,&coeff,Olapdeltapsi,inc,residxt[n],inc);
  }
  
  

  delete [] Uinv;
  delete [] QUinv;
  delete [] UUinv;
  delete [] AUinv;
  delete [] AsqUinv;

  //delete [] AUmat;
  //delete [] AsqUmat;
  delete [] H0deltapsi;
  delete [] Olapdeltapsi;
  delete [] Olapsqdeltapsi;
  delete [] nabladeltapsi;
  delete [] transposenabladeltapsi;
  delete [] nablaolapdeltapsi;
  delete [] olapnabladeltapsi;

}

cmplx* __restrict * __restrict wf::
cancelresiduals_Uinv(cmplx* __restrict * __restrict residxt,
		     temporalbasis* tbas){
  //find deltaphi necessary to cancel residxt
  cout << "inside cancelresiduals_Uinv\n";
  int ot=tbas->order;
  
  cmplx* __restrict * __restrict deltaphi=new cmplx* __restrict[ot];
  cmplx* __restrict * __restrict tmpresid=new cmplx* __restrict[ot];
  for(int n=0;n<ot;n++){
    deltaphi[n]=initializearray(nbf);
    tmpresid[n]=arraycopy(residxt[n],nbf);
  }

  //correct residuals at levels greater than 0 (residuals at level 0 may be
  //nonzero)
  for(int n=ot-1;n>=0;n--){
    //cout << "n\t"<<n<<"\n";
    //cout <<"tmpresid n before = "<<n<<"\t"<<nthcomponentsignificance(tmpresid,n)<<"\n";
    cmplx* deltaphi_n=residualcorrection_Uinv(n,n,tmpresid[n],tbas);
    //cout << "found deltaphi_n\n";
    applydeltapsi_Uinv(n,ot,deltaphi_n,deltaphi,tmpresid,tbas);
    //cout <<"tmpresid n = "<<n<<"\t"<<nthcomponentsignificance(tmpresid,n)<<"\n";
    delete [] deltaphi_n;
  }
  
  //cout << "tmpresid after correction\n";
  //for(int n=0;n<ot;n++){
  //  cout <<"norm n = "<<n<<"\t"<<nthcomponentsignificance(tmpresid,n)<<"\n";
  //}

  for(int n=0;n<ot;n++){
    delete [] tmpresid[n];
  }
  delete [] tmpresid;

  return deltaphi;
}


void wf::timestep_Uinv(rl tmin, rl tmax, potential* Pot,pulse* Pls,
		  wf* sourcewf, rl sourceEn, rl accuracygoal, rl& newdt){
  //find wfxt which satisfies least action equations & calculate size of next
  //step

  //set up tridiagonal temporal basis (see triDbasis.cpp)
  rl dt=tmax-tmin;
  temporalbasis* tbas=gbas->tbasis;
  tbas->updateTmats(tmin,tmax,Pls);
  sourcewf->gbas->tbasis->updateTmats(tmin,tmax,Pls);
  cmplx* tbas_triD_basischange=triD_basischange(tbas->order);
  temporalbasis* tbas_triD=new temporalbasis(tbas,
					 tbas_triD_basischange,Pls,tmin,tmax);
  tbas_triD->updateTmats(tmin,tmax,Pls);
  
  int ot=tbas->order;//order of temporal basis

  //cout << "tbas_triD matrices\n";
  //cout << "umat\n";
  //printmat(tbas_triD->umat,ot,ot);
  //cout << "qmat\n";
  //printmat(tbas_triD->qmat,ot,ot);
  //cout << "Amat\n";
  //printmat(tbas_triD->Amat,ot,ot);
  

  //targetxt is the action due to (delta H).sourcewf
  cmplx* __restrict * __restrict targetxt=sourcewf->
    inhomogeneous_action_lengthgauge(sourceEn,tbas_triD);
  //cmplx* __restrict * __restrict targetxt=sourcewf->
  //  inhomogeneous_action(sourceEn,tbas_triD);

  //cout << "targetxt\n";
  //for(int n=0;n<ot;n++){
  //  cout <<"n = "<<n<<"\t"<<nthcomponentsignificance(targetxt,n)<<"\n";
  //  //printmat(targetxt[n],1,nbf);
  //}

  //initialize guessxt, residxt
  cmplx* __restrict * __restrict guessxt=new cmplx* __restrict[ot];
  cmplx* __restrict * __restrict residxt=new cmplx* __restrict[ot];
  //cmplx* __restrict * __restrict diffxt=new cmplx* __restrict[ot];
  for(int n=0;n<ot;n++){
    guessxt[n]=initializearray(nbf);
    residxt[n]=initializearray(nbf);
    //diffxt[n]=initializearray(nbf);
  }


  //initial guess is initial condition: guessxt[0]=psi
  //applydeltapsi(0,ot,psi,guessxt,residxt,tbas_triD);
  //applydeltapsi(1,ot,psi,guessxt,residxt,tbas_triD);
  initialguess(ot,psi,guessxt,residxt,tbas_triD);
  
  //refinement of initial guess
  int iterindx=0;
  rl maxresid=1.;
  rl maxdelta=1.;
  while(iterindx<5){//while((maxdelta>accuracygoal) and (iterindx<ot)){//while((maxresid>1.e-6*accuracygoal) and (iterindx<ot)){
    iterindx++;
    cout << "iterindx, maxdelta\t"<<iterindx<<"\t"<<maxdelta<<"\n";
    cmplx* __restrict * __restrict diffxt=psixtdiff(residxt,targetxt,ot);//psixtdiff(targetxt,residxt,ot);
    //cout << "calling Udeltaxt\n";
    cmplx* __restrict * __restrict Udeltaxt=
      cancelresiduals_Uinv(diffxt,tbas);//solve for U*deltapsi
    //cout <<"Calling Uinvpsi\n";
    cmplx* __restrict * __restrict deltaxt=
      Uinvpsi(ot,Udeltaxt);//solve for deltapsi
    zeroarray(deltaxt[0],nbf);//don't change initial condition
    //cout << "calling applydeltapsi\n";
    applydeltapsi(ot,deltaxt,guessxt,residxt,tbas);//apply deltapsi

    maxdelta=0.;
    for(int nt=0;nt<ot;nt++){
      rl Udelta=nthcomponentsignificance(Udeltaxt,nt);
      cout << nt<<"\tUdeltaxt significance\t"<<Udelta<<"\n";
    }


    for(int nt=1;nt<ot;nt++){
      rl delta=nthcomponentsignificance(deltaxt,nt);
      maxdelta=max(maxdelta,delta);
      cout << nt<<"\tdeltaxt significance\t"<<delta<<"\n";
    }
    cout << "maxdelta\t"<<maxdelta<<"\n";

    //find maximum deviation from goal
    maxresid=0.;
    for(int nt=1;nt<ot;nt++){
      rl resid=nthcomponentsignificance(residxt,targetxt,nt);
      maxresid=max(maxresid,resid);
      //cout << nt<<"\trefining residual significance\t"<<resid<<"\n";
    }

    //delete diffxt, Udeltaxt, deltaxt
    for(int n=0;n<ot;n++){
      delete [] diffxt[n];
      delete [] Udeltaxt[n];
      delete [] deltaxt[n];
    }
    delete [] diffxt;
    delete [] Udeltaxt;
    delete [] deltaxt;

  }



  rl enorm=errornorm(ot-1,residxt,targetxt);
  cout <<"error norm\t"<<enorm<<"\n";
  for(int nt=0;nt<ot;nt++){
    cout << nt<<"\tresidual significance\t"<<
      nthcomponentsignificance(residxt,targetxt,nt)<<"\n";
  }
  

  for(int nt=0;nt<ot;nt++){
    cout << nt<<"\tcomponent significance\t"<<
      nthcomponentsignificance(guessxt,nt)<<"\n";
  }

  

  rl truncationerror=lastcomponentsignificance(guessxt,ot);
  cout <<"last component significance\t"<<dt<<"\t"<<
    truncationerror<<"\n";

  //try new time step=dt*(accuracygoal/truncationerror)**(1./(bfordergoal-1))
  rl error=truncationerror;//max(truncationerror,maxresidual);
  newdt=dt*pow(abs(accuracygoal/error),(1./(ot-1)));
  cout << "newdt\t"<<newdt<<"\n";

  delete [] psi;
  psi=psif(guessxt,ot);

  
  delete [] tbas_triD_basischange;
  delete tbas_triD;
  for(int n=0;n<ot;n++){
    delete [] guessxt[n];
    delete [] residxt[n];
    delete [] targetxt[n];
  }
  delete [] guessxt;
  delete [] residxt;
  delete [] targetxt;
}

cmplx* __restrict * __restrict wf::
psixtdiff(cmplx* __restrict * __restrict psi1, 
	  cmplx* __restrict * __restrict psi2, int ot){
  cmplx* __restrict * __restrict deltapsi=new cmplx*[ot];
  cmplx coeff1=1.;
  cmplx coeff2=1.;
  for(int n=0;n<ot;n++){
    deltapsi[n]=arraydiff(coeff1,psi1[n],coeff2,psi2[n],nbf);
  }
  return deltapsi;
}
