#include "./classes.h"
#include "./globalbasis.h"

cmplx* globalbasis::psi0setup(cmplx (*func)(rl x)){
  //given some initial function, find coefficients for the spatial basis
  //functions so that psi0(x)=func(x)

  //number of equations will be equal to number of basis functions (recalling
  //that two adjacent elements share one basis function)
  int neq=nelts*xorder+(nelts-1);//also equal to (nelts-1)*xorder+1

  //set up arrays of function values 
  cmplx** __restrict funcvals=new cmplx*[nelts];
  cmplx** __restrict bfvals=new cmplx*[nelts];
  for(int eltnum=0;eltnum<nelts;eltnum++){
    int eltorder=elementbases[eltnum]->order;
    rl** inttable=elementbases[eltnum]->integrationtable(eltorder);
    rl* __restrict intpts=inttable[0];
    rl* __restrict intwts=inttable[1];
    cmplx* __restrict eltfuncvals=new cmplx[eltorder];
    cmplx* __restrict eltbfvals=new cmplx[eltorder*eltorder];
    //array of function values * intwts
    for(int i=0;i<eltorder;i++){
      eltfuncvals[i]=func(intpts[i]);
    }
    //array of basis function values * intwts
    for(int i=0;i<eltorder;i++){
      cmplx* tmpbfvals=elementbases[eltnum]->evalbasisfuncs(intpts[i]);
      for(int j=0;j<eltorder;j++){
	eltbfvals[arrayindx(i,j,eltorder,eltorder)]=tmpbfvals[j];
      }
      delete [] tmpbfvals;
    }
    funcvals[eltnum]=eltfuncvals;
    bfvals[eltnum]=eltbfvals;

    delete [] intpts;
    delete [] intwts;
    delete [] inttable;
  }


  //set up linear system to solve for coefficients & lagrange multipliers the
  //convention is that the lagrange multiplier for the border functions comes
  //in between the equation for the last element of the leftmost element and
  //the zeroth equation for the rightmost element, so that the index for the
  //first equation in a particular element is eltfirstindices[eltnum]+eltnum
  int kl=xorder;
  int ku=xorder;
  int width=2*kl+ku+1;
  cmplx* __restrict lhsmat=initializearray(width*neq);
  cmplx* __restrict rhsvec=initializearray(neq);
  for(int eltnum=0;eltnum<nelts;eltnum++){
    int firstindx=eltfirstindices[eltnum]+eltnum;
    int eltorder=elementbases[eltnum]->order;
    //linear system:
    //1)sum of coefficients * basis function values = function values
    for(int i=0;i<eltorder;i++){
      rhsvec[firstindx+i]=funcvals[eltnum][i];
    }
    for(int i=0;i<eltorder;i++){
      for(int j=0;j<eltorder;j++){
	lhsmat[bandarrayindx(firstindx+i,firstindx+j,ku,kl,neq)]=
	  bfvals[eltnum][arrayindx(i,j,eltorder,eltorder)];
      }
    }
  }
  //set up equations for lagrange multipliers
  for(int eltnum=0;eltnum<nelts-1;eltnum++){
    int firstindx=eltfirstindices[eltnum]+eltnum;
    int lagindx=firstindx+elementbases[eltnum]->order;
    int leftindx=lagindx-1;//last indx in leftmost elt
    int rightindx=lagindx+1;//zeroth indx in rightmost elt
    lhsmat[bandarrayindx(leftindx,lagindx,ku,kl,neq)]+=1.;
    lhsmat[bandarrayindx(lagindx,leftindx,ku,kl,neq)]+=1.;
    lhsmat[bandarrayindx(rightindx,lagindx,ku,kl,neq)]-=1.;
    lhsmat[bandarrayindx(lagindx,rightindx,ku,kl,neq)]-=1.;
    rhsvec[lagindx]=0.;
  }

  //call zgbsv to solve for psi0
  int nrhs=1;
  int* ipiv=new int[neq];
  int info=0;
  zgbsv(&neq,&kl,&ku,&nrhs,lhsmat,&width,ipiv,rhsvec,&neq,&info);
  if(info!=0){
    cout << "problem with zgbsv in psi0setup! "<<info<<"\n";
  }

  cmplx* retvec=initializearray(nbf);
  for(int eltnum=0;eltnum<nelts;eltnum++){
    int eltorder=elementbases[eltnum]->order;
    for(int i=0;i<eltorder;i++){
      retvec[eltfirstindices[eltnum]+i]=
	rhsvec[eltfirstindices[eltnum]+eltnum+i];
    }
  }
  
  delete [] rhsvec;
  delete [] lhsmat;
  return retvec;


}
